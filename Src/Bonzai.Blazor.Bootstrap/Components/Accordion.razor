@inherits BootstrapContainerBase

<div @attributes="AdditionalAttributes" class="@Classes">
    <CascadingValue Name="Accordion" Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public bool AlwaysOpen { get; set; }

    public int AccordionItemCount => AccordionItems.Count;

    public Accordion()
    {
        AfterRender(OpenFirstItemByDefault);
    }

    protected override string DefaultClass { get; } = "accordion";

    private List<AccordionItem> AccordionItems { get; set; } = new List<AccordionItem>();

    private bool _isUpdatingItems;

    internal void RegisterAccordionItem(AccordionItem accordionItem)
    {
        AccordionItems.Add(accordionItem);
    }

    internal void RemoveAccordionItem(AccordionItem accordionItem)
    {
        AccordionItems.Remove(accordionItem);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    internal async Task SetExpandedItem(AccordionItem expandedItem)
    {
        if (!AlwaysOpen && !_isUpdatingItems)
        {
            _isUpdatingItems = true;
            foreach (var accordionItem in AccordionItems)
            {
                if (accordionItem != expandedItem && accordionItem.Expanded)
                {
                    await accordionItem.SetExpandedAsync(false);
                }
            }
            _isUpdatingItems = false;
        }
    }

    private async Task OpenFirstItemByDefault()
    {
        // this accordion could be recreated or the user may have a preference on which
        // item they want to open first, so don't set Expanded if it's already set.
        if (!AccordionItems.Any() || AccordionItems.Any(x => x.Expanded))
            return;
        var first = AccordionItems.First();
        await first.SetExpandedAsync(true);
    }
}