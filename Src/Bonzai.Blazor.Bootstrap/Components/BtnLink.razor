@using System.Text.RegularExpressions

@inherits Btn

<a role="@Role"
   @attributes="AdditionalAttributes"
   class="@Classes"
   @onclick="HandleClick"
   @onclick:preventDefault="IsDefaultPrevented">
    @ChildContent
</a>

@code {
    [Parameter]
    public bool PreventDefault { get; set; }

    public BtnLink() : base("link") { }

    private bool Disabled { get; set; }

    private string Role { get; set; } = "button";

    private bool IsDefaultPrevented => PreventDefault
        || Disabled
        || OnClick.HasDelegate;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (AdditionalAttributes != null)
        {
            SetupDisabledState();
            SetRole();
        }
    }

    private async Task HandleClick(MouseEventArgs args)
    {
        if (Disabled)
            return;

        await OnClick.InvokeAsync(args);
    }

    private void SetupDisabledState()
    {
        if(!(AdditionalAttributes.TryGetValue("disabled", out var disabledObject)
            && bool.TryParse(disabledObject.ToString(), out var disabled)
            && disabled))
        {
            return;
        }

        if (AdditionalAttributes.TryGetValue("class", out var classObject))
        {
            var classes = classObject.ToString();
            AdditionalAttributes["class"] = $"{classes} disabled";
        }
        else
        {
            AdditionalAttributes["class"] = "disabled";
        }

        if(!AdditionalAttributes.ContainsKey("tabindex"))
        {
            AdditionalAttributes["tabindex"] = -1;
        }

        AdditionalAttributes["aria-disabled"] = "true";
        Disabled = true;
    }

    private void SetRole()
    {
        if(AdditionalAttributes.TryGetValue("href", out var href)
            && href.ToString().Any())
        {
            Role = "link";
        }
        else
        {
            Role = "button";
        }
    }
}
