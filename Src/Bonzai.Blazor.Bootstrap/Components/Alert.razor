@inherits BootstrapVariantContainerBase

@if(!Hidden || IsFading)
{
    <div @attributes="AdditionalAttributes"
         class="@Classes"
         role="alert"
         @ref="AlertDiv">
        @if(Dismissible)
        {
            <Dismiss OnClick="HideAlert" />
        }
        @ChildContent
    </div>
}

@code {
    [Parameter]
    public bool Dismissible { get; set; }

    private bool _hidden;
    [Parameter]
    public bool Hidden
    {
        get => _hidden;
        set
        {
            _hidden = value;
            if(_hidden)
            {
                IsFading = FadeOut;
            }
        }
    }

    [Parameter]
    public EventCallback<bool> HiddenChanged { get; set; }

    private bool _fadeOut;
    [Parameter]
    public bool FadeOut
    {
        get => _fadeOut;
        set
        {
            _fadeOut = value;
            if(_fadeOut)
            {
                AfterRenderAsync(ListenForTransitionEnd);
            }
            else
            {
                AfterRenderAsync(StopListeningForTransitionEnd);
            }
        }
    }

    [Inject]
    private IBootstrapJsService _bootstrapJsService { get; set; }

    private bool IsFading { get; set; }

    private ElementReference AlertDiv { get; set; }

    [JSInvokable]
    public void StopFading()
    {
        IsFading = false;
        StateHasChanged();
    }

    protected override string DefaultClass
    {
        get
        {
            var classes = new ClassNameBuilder($"alert alert-{Variance}");

            if(Dismissible)
            {
                classes.AddClassName("alert-dismissible");
            }

            if(FadeOut)
            {
                classes.AddClassName("fade");

                if(!IsFading)
                {
                    classes.AddClassName("show");
                }
            }

            return classes.GetClassNames();
        }
    }

    private async Task HideAlert()
    {
        Hidden = !Hidden;

        await HiddenChanged.InvokeAsync(Hidden);
    }

    private async Task ListenForTransitionEnd()
    {
        await _bootstrapJsService.AddEventListenerAsync(
                AlertDiv,
                this,
                "transitionend",
                nameof(StopFading));
    }

    private async Task StopListeningForTransitionEnd()
    {
        await _bootstrapJsService.RemoveEventListenerAsync(
                AlertDiv,
                "transitionend",
                nameof(StopFading));
    }
}
