@inherits BootstrapContainerBase

<div @attributes="@AdditionalAttributes" class="@Classes" id="@Id">@ChildContent</div>

@code {
    private int _id = GetNextId();

    [Parameter]
    public string Id { get; set; }

    [CascadingParameter(Name = TabContainer.TabContainerParameterName)]
    public TabContainer TabContainer { get; set; }

    [Parameter]
    public string Title { get; set; }

    internal bool Active { get; set; }

    private TabItem Tab { get; set; }

    protected override string DefaultClass
    {
        get
        {
            var classBuilder = new ClassNameBuilder("tab-pane");

            if(Active)
            {
                classBuilder.AddClassName("active");
            }

            return classBuilder.GetClassNames();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (TabContainer == null)
            throw new ArgumentNullException(nameof(TabContainer), $"{nameof(TabPane)} must be rendered inside of a {typeof(TabContainer)}");

        if(string.IsNullOrWhiteSpace(Id))
        {
            Id = $"BBBS_TabPane__{_id}";
        }

        TabContainer.RegisterTab(this);
    }

    internal void Show()
    {
        if (Active)
            return;

        Active = true;
    }

    internal void Hide()
    {
        if (Active == false)
            return;

        Active = false;
        StateHasChanged();
    }

    public async Task MakeActive()
    {
        if (Active)
            return;

        await TabContainer.SetActiveTabAsync(this);
    }

    private static int _nextId;
    private static int GetNextId()
    {
        if (_nextId == int.MaxValue)
            return _nextId = int.MinValue;

        return _nextId++;
    }
}
