@inherits BootstrapContainerBase

<div @attributes="@AdditionalAttributes" class="@Classes" id="@Id" @ref="TabPaneElement">@ChildContent</div>

@code {
    private int _id = GetNextId();
    private string _displayClasses;

    [Parameter]
    public string Id { get; set; }

    [CascadingParameter(Name = TabContainer.TabContainerParameterName)]
    public TabContainer TabContainer { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Inject]
    private IBootstrapJsService _bootstrapJSService { get; set; }

    internal bool Active { get; set; }

    private bool _animated;
    internal bool Animated
    {
        get => _animated;
        set
        {
            _animated = value;

            if (_animated)
            {
                AfterRenderAsync(ListenForTransitionEnd);
            }
            else
            {
                AfterRenderAsync(StopListeningForTransitionEnd);
            }
        }
    }

    private ElementReference TabPaneElement { get; set; }

    [JSInvokable]
    public void FadeEnd()
    {
        if(!Active)
        {
            _displayClasses = null;
            StateHasChanged();
            TabContainer.FadeInActiveTab();
        }
    }

    protected override string DefaultClass
    {
        get
        {
            var classBuilder = new ClassNameBuilder("tab-pane");

            if(Animated)
            {
                classBuilder.AddClassName("fade");
            }

            classBuilder.AddClassName(_displayClasses);

            return classBuilder.GetClassNames();
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (TabContainer == null)
            throw new ArgumentNullException(nameof(TabContainer), $"{nameof(TabPane)} must be rendered inside of a {typeof(TabContainer)}");

        if(string.IsNullOrWhiteSpace(Id))
        {
            Id = $"BBBS_TabPane__{_id}";
        }

        Animated = TabContainer.Fade;
        TabContainer.RegisterTab(this);
    }

    internal void Show()
    {
        if (Active)
            return;

        Active = true;
        _displayClasses = "active";

        if(Animated)
        {
            AfterRender(() =>
            {
                _displayClasses += " show";
                StateHasChanged();
            });
        }
    }

    internal void Hide()
    {
        if (Active == false)
            return;

        Active = false;
        _displayClasses = "active";
        // TODO SETUP TRANSITIONEND LISTENER HERE AND TEST
        StateHasChanged();
    }

    public async Task MakeActive()
    {
        if (Active)
            return;

        await TabContainer.SetActiveTabAsync(this);
    }

    private static int _nextId;
    private static int GetNextId()
    {
        if (_nextId == int.MaxValue)
            return _nextId = int.MinValue;

        return _nextId++;
    }

    private async Task ListenForTransitionEnd()
    {
        await _bootstrapJSService.AddEventListenerAsync(
                TabPaneElement,
                this,
                "transitionend",
                nameof(FadeEnd));
    }

    private async Task StopListeningForTransitionEnd()
    {
        await _bootstrapJSService.RemoveEventListenerAsync(
                TabPaneElement,
                "transitionend",
                nameof(FadeEnd));
    }
}
