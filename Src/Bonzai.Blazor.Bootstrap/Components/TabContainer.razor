@inherits BootstrapComponentBase

<CascadingValue Name="@TabContainerParameterName" Value="this">
@if(Tabs == null)
{
    <TabList>
        @foreach(var tabPanePair in _tabPanes)
        {
            @tabPanePair.Value.TabItem
        }
    </TabList>
}
@if(Panes != null)
{
    <TabContent>
        @Panes
    </TabContent>
}
</CascadingValue>

@code {
    public const string TabContainerParameterName = nameof(TabContainer);

    private Dictionary<string, TabPane> _tabPanes = new();

    [Parameter]
    public RenderFragment Tabs { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public RenderFragment Panes { get; set; }

    [Parameter]
    public bool Animated { get; set; }

    private string _activeTabId;
    [Parameter]
    public string ActiveTabId
    {
        get => _activeTabId;
        set
        {
            if (_activeTabId == value)
                return;

            if(!_tabPanes.Any())
            {
                _activeTabId = value;
                return;
            }

            if (!_tabPanes.ContainsKey(value))
                throw new InvalidOperationException($"Could not find {nameof(TabPane)} with Id {value}. Unable to update active tab.");

            HideActiveTab();
            _activeTabId = value;
            ActiveTab.Show();
        }
    }

    [Parameter]
    public EventCallback<string> ActiveTabIdChanged { get; set; }

    TabPane ActiveTab => _tabPanes[ActiveTabId];

    public void RegisterTab(TabPane tabPane)
    {
        _tabPanes.Add(tabPane.Id, tabPane);

        if(string.IsNullOrWhiteSpace(ActiveTabId)
            || ActiveTabId == tabPane.Id)
        {
            _activeTabId = tabPane.Id;
            tabPane.Show();
        }
        StateHasChanged();
    }

    public IList<TabPane> GetTabs() => _tabPanes.Select(x => x.Value).ToList();

    public async Task SetActiveTabAsync(TabPane tabPane)
    {
        ActiveTabId = tabPane.Id;
        await ActiveTabIdChanged.InvokeAsync(ActiveTabId);
    }

    public async Task SetActiveTabAsync(string tabPaneId) =>
        await SetActiveTabAsync(_tabPanes[ActiveTabId]);

    internal void HideActiveTab()
    {
        if(!string.IsNullOrWhiteSpace(ActiveTabId))
        {
            ActiveTab.Hide();
        }
    }
}
