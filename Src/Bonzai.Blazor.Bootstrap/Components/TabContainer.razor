@inherits BootstrapComponentBase

<CascadingValue Name="@TabContainerParameterName" Value="this">
@if(Vertical)
{
    <div class="d-flex">
        @TabInterface
    </div>
}
else
{
    @TabInterface
}
</CascadingValue>

@code {
    public const string TabContainerParameterName = nameof(TabContainer);

    private List<TabPane> _tabPanes = new();
    private int? _fadeInTabIndex;
    private string _tabItemClass;
    private string _tabContentClass;

    [Parameter]
    public RenderFragment<IReadOnlyCollection<TabPane>> Tabs { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public bool Fade { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Pills { get; set; }

    private int _activeTabIndex;
    [Parameter]
    public int ActiveTabIndex
    {
        get => _activeTabIndex;
        set
        {
            if (_activeTabIndex == value)
                return;

            if (!_tabPanes.Any())
            {
                _activeTabIndex = value;
                return;
            }

            if (!IndexIsInRange(value))
                throw new ArgumentOutOfRangeException($"{nameof(ActiveTabIndex)} must be between 0 and the count of child {nameof(TabPane)} components contained in this container minus 1 [0, {_tabPanes.Count - 1}]");

            UpdateActiveTab(value);
        }
    }

    [Parameter]
    public EventCallback<int> ActiveTabIndexChanged { get; set; }

    [Parameter]
    public bool Vertical { get; set; }

    TabPane ActiveTab => _tabPanes[ActiveTabIndex];

    private RenderFragment TabInterface => __builder =>
    {
        @if (Tabs == null)
        {
            <TabList Pills="Pills"
                     Vertical="Vertical">
                @foreach (var tabPane in _tabPanes)
                {
                    <TabItem Active="tabPane.Active"
                             LinkClicked="async () => await SetActiveTabAsync(tabPane)"
                             TabPane="tabPane"
                             LinkClasses="@_tabItemClass">
                        @tabPane.Title
                    </TabItem>
                }
            </TabList>
        }
        else
        {
            @Tabs(_tabPanes.AsReadOnly())
        }
        @if (ChildContent != null)
        {
            <TabContent class="@_tabContentClass">
                @ChildContent
            </TabContent>
        }
        else if (Content != null)
        {
            @Content
        }
    };

    public async Task RegisterTab(TabPane tabPane)
    {
        tabPane.Index = _tabPanes.Count;
        _tabPanes.Add(tabPane);

        if (ActiveTabIndex == tabPane.Index)
        {
            _activeTabIndex = tabPane.Index;
            await ActiveTabIndexChanged.InvokeAsync(ActiveTabIndex);
            tabPane.Show();
        }
        StateHasChanged();
    }

    public async Task SetActiveTabAsync(TabPane tabPane)
    {
        ActiveTabIndex = tabPane.Index;

        // When animated the value does not change until after the next render.
        if (!Fade)
        {
            await ActiveTabIndexChanged.InvokeAsync(ActiveTabIndex);
        }
    }

    public async Task SetActiveTabAsync(int tabPaneIndex)
    {
        if (IndexIsInRange(tabPaneIndex))
            throw new ArgumentOutOfRangeException($"{nameof(ActiveTabIndex)} must be between 0 and the count of child {nameof(TabPane)} components contained in this container minus 1 [0, {_tabPanes.Count - 1}]",
                nameof(tabPaneIndex));
        await SetActiveTabAsync(_tabPanes[tabPaneIndex]);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if(Vertical)
        {
            _tabItemClass = "btn btn-link";
            _tabContentClass = "flex-grow-1";
        }
        else
        {
            _tabItemClass = null;
            _tabContentClass = null;
        }
    }

    internal void HideActiveTab()
    {
        if (_tabPanes.Any() && IndexIsInRange(ActiveTabIndex))
        {
            ActiveTab.Hide();
        }
    }

    internal async Task FadeInActiveTab()
    {
        _activeTabIndex = _fadeInTabIndex.Value;
        _fadeInTabIndex = null;

        await ActiveTabIndexChanged.InvokeAsync(ActiveTabIndex);

        ActiveTab.Show();
        StateHasChanged();
    }

    internal void RemoveTab(TabPane tabPane)
    {
        if (tabPane.Active)
        {
            ActiveTabIndex = 0;
        }
        else
        {
            AfterRenderOnceAsync(UpdateActiveTabIndexAfterTabRemoval);
        }

        _tabPanes.RemoveAt(tabPane.Index);

        for (var idxTabPane = tabPane.Index; idxTabPane < _tabPanes.Count; ++idxTabPane)
        {
            var remainingTabPane = _tabPanes[idxTabPane];
            remainingTabPane.Index = idxTabPane;
        }
    }

    bool IndexIsInRange(int index) =>
        index < _tabPanes.Count && index >= 0;

    async Task UpdateActiveTabIndexAfterTabRemoval()
    {
        _activeTabIndex = _tabPanes.Where(x => x.Active)
            .Single().Index;
        await ActiveTabIndexChanged.InvokeAsync(ActiveTabIndex);
    }

    void UpdateActiveTab(int activeTabIndex)
    {
        if (Fade)
        {
            _fadeInTabIndex = activeTabIndex;
            HideActiveTab();
        }
        else
        {
            HideActiveTab();
            _activeTabIndex = activeTabIndex;
            ActiveTab.Show();
        }
    }
}
