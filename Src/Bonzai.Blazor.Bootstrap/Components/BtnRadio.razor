@*

    BtnRadio is more changing than I can deal with right now.

    Known issues
        - Set the name of 2 radio buttons to be the same name (This is how radio buttons work in html)
        - Click one of the 2 radio buttons (Goes into selected/highlighted state which is expected)
        - Click the other button (Other button is higlighted/selected and original button is not which is expected. 1st button still has true value which is not expected.)
        - Click the first button a second time (Unexpected behavior, both radio buttons display as UNhighglighted/UNselected. Expecte behavior: first button is highlighted/selected second button is not. First button value is true, 2nd is false.)
    
@inherits BootstrapVariantContainerBase

<input type="radio"
       class="btn-check"
       id="@InputId"
       checked="@Value"
       @onchange="ToggleValue"
       value="@InputValue"
       name="@Name"/>
<label @attributes="AdditionalAttributes"
       for="@InputId"
       class="@Classes">
    @ChildContent
</label>

@code {
    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public string InputValue { get; set; }

    [Parameter]
    public string Name { get; set; }

    public BtnRadio() : base("outline-primary") { }

    protected override string DefaultClass =>
        $"btn btn-{Variance}";

    private uint Id { get; } = NextId;

    private string InputId
    {
        get
        {
            if (AdditionalAttributes.ContainsKey("id"))
            {
                return AdditionalAttributes["id"].ToString();
            }
            return $"BtnCheck-{Id}";
        }
    }

    private static uint _nextId;
    private static uint NextId
    {
        get
        {
            if (_nextId == uint.MaxValue)
            {
                return _nextId = uint.MinValue;
            }

            return _nextId++;
        }
    }

    protected override void OnParametersSet()
    {
        if (AdditionalAttributes == null)
        {
            AdditionalAttributes = new Dictionary<string, object>();
        }
    }

    private async Task ToggleValue()
    {
        Console.WriteLine($"Updating {InputId} value: {!Value}");
        Value = !Value;
        await ValueChanged.InvokeAsync(Value);
    }
}*@
