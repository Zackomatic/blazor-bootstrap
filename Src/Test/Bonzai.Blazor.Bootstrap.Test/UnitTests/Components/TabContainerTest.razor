@inherits TestBase<TabContainer>

@code {
    const string TabId1 = "tab_one";
    const string TabId2 = "tab_two";
    const string TabId3 = "tab_three";
    const string Title1 = "Tab Title 1";
    const string Title2 = "Tab Title 2";
    const string Title3 = "Tab Title 3";

    public TabContainerTest()
    {
        // this is needed by the TabPane component
        new MockBootstrapJsService(Services);
    }

    [Fact]
    public void PanesIsSet_RendersTabContentWithPanesChildContent()
    {
        var cut = RenderComponent(
            @<TabContainer>
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                </Panes>
            </TabContainer>);

        var content = cut.Find("div.tab-content");
    }

    [Fact]
    public void ActiveTabIdIsNotSet_FirstPaneIsSetToActive()
    {
        var cut = RenderComponent(
            @<TabContainer>
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                </Panes>
            </TabContainer>);

        AssertTabPane.IsActive(cut, ".tab-content .tab-pane:first-child");
        AssertTabPane.IsNotActive(cut, ".tab-content .tab-pane:nth-child(2)");
    }

    [Theory]
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(2)]
    public void ActiveTabIndexIsSet_TabPaneWithActiveIndexIsSetToActiveOnInitialRender(int activeTabIndex)
    {
        var cut = RenderComponent(
            @<TabContainer ActiveTabIndex="@activeTabIndex">
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                    <TabPane>Pane 3</TabPane>
                </Panes>
            </TabContainer>);

        AssertTabPane.IsActive(cut, $".tab-content .tab-pane:nth-child({activeTabIndex + 1})");

        foreach(var tabPane in cut.FindAll($".tab-content .tab-pane:not(:nth-child({activeTabIndex + 1}))"))
        {
            AssertTabPane.IsNotActive(tabPane);
        }
    }

    [Theory]
    [InlineData(0, 1)]
    [InlineData(0, 2)]
    [InlineData(1, 0)]
    public void ActiveTabIndexIsUpdated_TabWithMatchingIndexIsMadeActive(int initialActiveTab,
        int updatedActiveTab)
    {
        var cut = RenderComponent(
            @<TabContainer ActiveTabId="@initialActiveTab">
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                    <TabPane>Pane 3</TabPane>
                </Panes>
            </TabContainer>);

        cut.SetParametersAndRender(builder => builder.Add(x => x.ActiveTabIndex, updatedActiveTab));

        AssertTabPane.IsActive(cut, $".tab-content .tab-pane:nth-child({updatedActiveTab + 1})");

        foreach (var tabPane in cut.FindAll($".tab-content .tab-pane:not(:nth-child({updatedActiveTab + 1}))"))
        {
            AssertTabPane.IsNotActive(tabPane);
        }
    }

    [Fact]
    public void TabsFragmentIsNotSet_RendersTabItemsForChildPanes()
    {
        
        var cut = RenderComponent(
            @<TabContainer>
                <Panes>
                    <TabPane Title="@Title1">Pane 1</TabPane>
                    <TabPane Title="@Title2">Pane 2</TabPane>
                    <TabPane Title="@Title3">Pane 3</TabPane>
                </Panes>
            </TabContainer>);

        cut.Render();

        var tabItems = cut.FindAll("li");
        Assert.Equal(3, tabItems.Count);
        Assert.NotNull(cut.FindComponent<TabList>());
    }

    [Fact]
    public void TabsFragmentIsNotSet_TabItemClicked_CorrespondingTabItemAndTabPaneMadeActive()
    {
        const int ActiveTabIndex = 1;

        var cut = RenderComponent(
            @<TabContainer>
                <Panes>
                    <TabPane Title="@Title1">Pane 1</TabPane>
                    <TabPane Title="@Title2">Pane 2</TabPane>
                    <TabPane Title="@Title3">Pane 3</TabPane>
                </Panes>
            </TabContainer>);

        cut.Find($".nav-item:nth-child({ActiveTabIndex + 1}) .nav-link")
            .Click();

        var tabItem = cut.FindComponents<TabItem>()[ActiveTabIndex];

        Assert.True(tabItem.Instance.Active);

        var tabPane = cut.FindComponents<TabPane>()[ActiveTabIndex];

        Assert.True(tabPane.Instance.Active);
    }

    [Fact]
    public void TabsFragmentIsNotSet_TabItemIsClicked_ActiveTabIndexIsUpdated()
    {
        const int ExpectedActiveTabId = 1;
        int actualActiveTabIndex = default;
        var cut = Render<TabContainer>(
            @<TabContainer @bind-ActiveTabIndex="actualActiveTabIndex">
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                </Panes>
            </TabContainer>);

        cut.Find(".nav-item:nth-child(2) .nav-link").Click();
        Assert.Equal(ExpectedActiveTabId, actualActiveTabIndex);
    }

    [Fact]
    public void TabsFragmentIsSet_RendersTabsFragment()
    {
        const string ExpectedContent = "unit test tabs";
        var cut = RenderComponent(
            @<TabContainer>
                <Tabs>@ExpectedContent</Tabs>
            </TabContainer>);

        Assert.Contains(ExpectedContent, cut.Markup);
    }

    [Fact]
    public void ContentIsSet_PanesIsNotSet_RendersContent()
    {
        const string ExpectedContent = "unit test tabs";
        var cut = RenderComponent(
            @<TabContainer>
                <Content>@ExpectedContent</Content>
            </TabContainer>);

        Assert.Contains(ExpectedContent, cut.Markup);
    }

    [Fact]
    public void PillsIsTrue_TabListPillsIstrue()
    {
        var cut = RenderComponent(
            @<TabContainer Pills="true">
                <Panes>
                    <TabPane>Pane 1</TabPane>
                    <TabPane>Pane 2</TabPane>
                    <TabPane>Pane 3</TabPane>
                </Panes>
            </TabContainer>);

        var tabList = cut.FindComponent<TabList>();
        Assert.True(tabList.Instance.Pills);
    }
}
