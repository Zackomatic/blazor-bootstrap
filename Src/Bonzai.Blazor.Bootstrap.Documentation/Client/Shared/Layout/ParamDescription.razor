@using System.Linq.Expressions
@using System.Reflection

@typeparam TDoc
@typeparam TProperty

<ParameterDescription Name="@PropertyInfo.Name"
                      Type="@PropertyInfo.PropertyType"
                      ChildContent="ChildContent"/>

@code {
    [Parameter]
    public Expression<Func<TDoc, TProperty>> Property { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private PropertyInfo PropertyInfo { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        PropertyInfo = GetPropertyInfo(Property);
    }

    private PropertyInfo GetPropertyInfo(
        Expression<Func<TDoc, TProperty>> selector)
    {
        Expression body = selector;
        if (body is LambdaExpression)
        {
            body = ((LambdaExpression) body).Body;
        }
        switch (body.NodeType)
        {
            case ExpressionType.MemberAccess:
                return (PropertyInfo) ((MemberExpression) body).Member;
            default:
                throw new InvalidOperationException();
        }
    }
}
