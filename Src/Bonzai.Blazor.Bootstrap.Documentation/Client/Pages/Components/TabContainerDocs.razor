@using Microsoft.AspNetCore.Components.Web
@using Bonzai.Blazor.Bootstrap.Documentation.Client.Pages.Examples.TabContainer

@page "/components/tab-container"

@inherits DocsBase

<ComponentDoc Type="typeof(TabContainer)">
    <CustomDescription>
        A container to wrap individual <code>TabPane</code> components. Used to create a tabbed interface.
    </CustomDescription>
    <Properties>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.ActiveTabIndex))">
            The id of the tab page that is currently active (shown). This value gets updated when a new tab is displayed.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.ActiveTabIndexChanged))">
            An action to execute when the <PropertyReference Name="@nameof(TabContainer.ActiveTabIndex)" /> property changes.
        </ParamDescription>
        <AdditionalAttributes />
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Content))">
            Use this render fragment when you want to disaply the tab pages in your own custom container. Using this fragment
            will not wrap your content in any container so make sure your <PropertyReference Name="@nameof(TabPane)" />s are
            wrapped in some kind of container element.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Fade))">
            Set to <code>true</code> to use fade in/out animations when switching tabs.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.ChildContent))">
            Use this render fragment when you want to disaply the tab pages in a <code>div</code> with the <code>tab-content</code>
            class. Using this fragment automatically wraps the child content in a containing <code>div</code> so it is ok to add
            <PropertyReference Name="@nameof(TabPane)" /> directly to this component.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Pills))">
            Render the tabs as pills.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Tabs))">
            Use this fragment when you want more control over how the tab links are displayed. When using this fragment you
            can obtain a reference to the <PropertyReference Name="@nameof(TabContainer)" /> by using a cascading parameter.
            The public constant <PropertyReference Name="@nameof(TabContainer.TabContainerParameterName)" /> is the name of
            the cascaded parameter.
        </ParamDescription>
    </Properties>
    <Methods>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.RegisterTab(default)">
            <Description>
                Registers the <PropertyReference Name="@nameof(TabPane)" /> with this container.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPane" Type="typeof(TabPane)">
                    The <PropertyReference Name="@nameof(TabPane)" /> instance to register.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.SetActiveTabAsync(default(TabPane))">
            <Description>
                Sets the <PropertyReference Name="@nameof(TabPane)" /> passed in as the active tab pane in this
                container. The active pane is the one that is displayed.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPane" Type="typeof(TabPane)">
                    The <PropertyReference Name="@nameof(TabPane)" /> instance to make active.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.SetActiveTabAsync(default(int))">
            <Description>
                Sets the <PropertyReference Name="@nameof(TabPane)" /> with the matching <code>TabPaneId</code> as the
                active tab in this container.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPaneId" Type="typeof(string)">
                    The id of the <PropertyReference Name="@nameof(TabPane)" /> to make active.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
    </Methods>
</ComponentDoc>

<ExampleHeading />
<Example ExampleNumber="ExampleNumber">
    <Description>
        Add <PropertyReference Name="@nameof(TabPane)" /> components to the <PropertyReference Name="@nameof(TabContainer.ChildContent)" /> <code>RenderFragment</code> to
        generate a tab control
    </Description>
    <LiveExample>
        <Panes />
    </LiveExample>
    <Code>@(@"<TabContainer>
    <TabPane Title=""Tab 1"">Content 1</TabPane>
    <TabPane Title=""Tab 2"">Content 2</TabPane>
    <TabPane Title=""Tab 3"">Content 3</TabPane>
    <TabPane Title=""Tab 4"">Content 4</TabPane>
    <TabPane Title=""Tab 5"">Content 5</TabPane>
    <TabPane Title=""Tab 6"">Content 6</TabPane>
</TabContainer>")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        Control the active tab programatically by binding to the <PropertyReference Name="@nameof(TabContainer.ActiveTabIndex)" />
    </Description>
    <LiveExample>
        <UpdateActiveTabId />
    </LiveExample>
    <Code>@(@"<Row class=""mb-2"">
    <Column>
        <Btn OnClick=""() => ActiveTabIndex = 0"">Display tab 1</Btn>
        <Btn OnClick=""() => ActiveTabIndex = 1"">Display tab 2</Btn>
        <Btn OnClick=""() => ActiveTabIndex = 2"">Display tab 3</Btn>
    </Column>
</Row>

<Row>
    <Column>
        <TabContainer @bind-ActiveTabIndex=""ActiveTabIndex"">
            <TabPane Title=""Tab 1"">Content 1</TabPane>
            <TabPane Title=""Tab 2"">Content 2</TabPane>
            <TabPane Title=""Tab 3"">Content 3</TabPane>
        </TabContainer>
    </Column>
</Row>

@code {
    const string TabId1 = ""TabId1"";
    const string TabId2 = ""TabId2"";
    const string TabId3 = ""TabId3"";

    private int ActiveTabIndex { get; set; }
}")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        Preserve the state of the <PropertyReference Name="@nameof(TabContainer)" /> by binding to the <PropertyReference Name="@nameof(TabContainer.ActiveTabIndex)" />.
        This prevents the tab from being reset when the parent container needs to re-render.
        <div class="py-2 fw-bold">Change tabs on each container below, then use this button to destroy, and then recreate that tab controls.</div>
    </Description>
    <LiveExample>
        <PreserveState />
    </LiveExample>
    <Code>@(@"<Row>
    <Column>
        <Btn OnClick=""DestroyComponents"">Recreate Component</Btn>
    </Column>
</Row>
<Row>
    <Column>
        <h6 class=""fw-bold my-2"">Without binding to ActiveTabId</h6>
    </Column>
</Row>
<Row class=""mb-4"">
    <Column>
        @if(ShowComponents)
        {
            <TabContainer>
                <TabPane Title=""Tab 1"">Content 1</TabPane>
                <TabPane Title=""Tab 2"">Content 2</TabPane>
                <TabPane Title=""Tab 3"">Content 3</TabPane>
            </TabContainer>
        }
    </Column>
</Row>
<Row>
    <Column>
        <h6 class=""fw-bold"">With binding to ActiveTabId</h6>
    </Column>
</Row>
<Row>
    <Column>
        @if(ShowComponents)
        {
            <TabContainer @bind-ActiveTabIndex=""ActiveTabIndex"">
                <TabPane Title=""Tab 1"">Content 1</TabPane>
                <TabPane Title=""Tab 2"">Content 2</TabPane>
                <TabPane Title=""Tab 3"">Content 3</TabPane>
            </TabContainer>
        }
    </Column>
</Row>

@code {
    private int ActiveTabIndex { get; set; }

    private bool ShowComponents { get; set; } = true;

    private void DestroyComponents()
    {
        ShowComponents = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(!ShowComponents)
        {
            ShowComponents = true;
            StateHasChanged();
        }
    }
}")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        This is the same as the previous example, except now the <PropertyReference Name="@nameof(TabContainer)" /> is using the Fade animation.
        This is more or less an integration test for the devs creating this library.
        <div class="py-2 fw-bold">Change tabs on each container below, then use this button to destroy, and then recreate that tab controls.</div>
    </Description>
    <LiveExample>
        <PreserveStateFade />
    </LiveExample>
    <Code>@(@"<Row>
    <Column>
        <Btn OnClick=""DestroyComponents"">Recreate Component</Btn>
    </Column>
</Row>
<Row>
    <Column>
        <h6 class=""fw-bold my-2"">Without binding to ActiveTabId</h6>
    </Column>
</Row>
<Row class=""mb-4"">
    <Column>
        @if (ShowComponents)
        {
            <TabContainer Fade=""true"">
                <TabPane Title=""Tab 1"">Content 1</TabPane>
                <TabPane Title=""Tab 2"">Content 2</TabPane>
                <TabPane Title=""Tab 3"">Content 3</TabPane>
            </TabContainer>
        }
    </Column>
</Row>
<Row>
    <Column>
        <h6 class=""fw-bold"">With binding to ActiveTabId</h6>
    </Column>
</Row>
<Row>
    <Column>
        @if (ShowComponents)
        {
            <TabContainer @bind-ActiveTabIndex=""ActiveTabIndex""
                          Fade=""true"">
                <TabPane Title=""Tab 1"">Content 1</TabPane>
                <TabPane Title=""Tab 2"">Content 2</TabPane>
                <TabPane Title=""Tab 3"">Content 3</TabPane>
            </TabContainer>
        }
    </Column>
</Row>

@code {
    private int ActiveTabIndex { get; set; }

    private bool ShowComponents { get; set; } = true;

    private void DestroyComponents()
    {
        ShowComponents = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (!ShowComponents)
        {
            ShowComponents = true;
            StateHasChanged();
        }
    }
}")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        By default the <PropertyReference Name="@nameof(TabContainer)" /> renders the panes in a <PropertyReference Name="@nameof(TabContent)" />
        component. You can override this behavior and render the panes in your own customized container by using the
        <PropertyReference Name="@nameof(TabContainer.Content)" /> <code>RenderFragment</code>.
    </Description>
    <LiveExample>
        <CustomContent />
    </LiveExample>
    <Code>@(@"@using System.Timers

<TabContainer>
    <Content>
        <TabContent class=""@BackgroundColorNode.Value"">
            <TabPane Title=""Tab 1"">
                Content 1
            </TabPane>
            <TabPane Title=""Tab 2"">
                Content 2
            </TabPane>
            <TabPane Title=""Tab 3"">
                Content 3
            </TabPane>
        </TabContent>
    </Content>
</TabContainer>

@code {
    private LinkedList<string> TabContainerColors { get; set; } =
        new LinkedList<string>(BootstrapVariations.ContextualVariations.Select(x => $""bg-{x}""));

    private LinkedListNode<string> BackgroundColorNode { get; set; }

    private Timer BackgroundColorUpdateInterval { get; set; }

    private LinkedListNode<string> NextBackgroundColorNode
    {
        get
        {
            return BackgroundColorNode.Next ?? TabContainerColors.First;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        BackgroundColorNode = TabContainerColors.First;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender)
        {
            BackgroundColorUpdateInterval = new Timer(500);
            BackgroundColorUpdateInterval.Elapsed += UpdateBackgroundColor;
            BackgroundColorUpdateInterval.Start();
        }
    }

    private void UpdateBackgroundColor(object sender, ElapsedEventArgs e)
    {
        BackgroundColorNode = NextBackgroundColorNode;
        StateHasChanged();
    }
}")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        <p>
            By default the tab links are rendered in a <PropertyReference Name="@nameof(TabList)" /> component. You can
            override this behavior and render a custom list of tab links by using the <PropertyReference Name="@nameof(TabContainer.Tabs)" />
            <code>RenderFragment</code>.
        </p>
        <p>
            The list of <PropertyReference Name="@nameof(TabPane)" />s is passed to this fragment as the context so you can use that
            to generate content for your tab links. You should also make sure that you call <PropertyReference Name="@nameof(TabContainer.SetActiveTabAsync)" />
             or update the <PropertyReference Name="@nameof(TabContainer.ActiveTabIndex)" /> when the link is clicked so that the proper content is displayed.
        </p>
    </Description>
    <LiveExample>
        <CustomTabList />
    </LiveExample>
    <Code>@(@"<TabContainer @ref=""TabContainer"">
    <Tabs Context=""tabPanes"">
        <TabList>
            @foreach(var tabPane in tabPanes)
            {
                <TabItem Active=""tabPane.Active""
                         TabPane=""tabPane""
                         LinkClicked=""async _ => await TabContainer.SetActiveTabAsync(tabPane)"">
                    @tabPane.Title
                    <svg xmlns=""http://www.w3.org/2000/svg"" style=""height: 2em; width: 2em;"" fill=""none"" viewBox=""0 0 24 24"" stroke=""currentColor"">
                        <path stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2"" d=""M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"" />
                    </svg>
                </TabItem>
            }
        </TabList>
    </Tabs>
    <ChildContent>
        <TabPane Title=""Tab 1"">
            Content 1
        </TabPane>
        <TabPane Title=""Tab 2"">
            Content 2
        </TabPane>
        <TabPane Title=""Tab 3"">
            Content 3
        </TabPane>
    </ChildContent>
</TabContainer>

@code {
    private TabContainer TabContainer { get; set; }
}")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        Use the <PropertyReference Name="@nameof(TabContainer.Pills)" /> to render the tabs as pills.
    </Description>
    <LiveExample>
        <Pills />
    </LiveExample>
    <Code>@(@"<TabContainer Pills=""true"">
    <TabPane Title=""Tab 1"">Content 1</TabPane>
    <TabPane Title=""Tab 2"">Content 2</TabPane>
    <TabPane Title=""Tab 3"">Content 3</TabPane>
</TabContainer>")</Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        Use the <PropertyReference Name="@nameof(TabContainer.Vertical)" /> property to render the tabs vertically instead of
        horizontally.
    </Description>
    <LiveExample>
        <Vertical />
    </LiveExample>
    <Code>@(@"<TabContainer Vertical=""true"">
    <TabPane Title=""Tab 1"">Content 1</TabPane>
    <TabPane Title=""Tab 2"">Content 2</TabPane>
    <TabPane Title=""Tab 3"">Content 3</TabPane>
</TabContainer>")
    </Code>
</Example>

@code{
    
}