@using Microsoft.AspNetCore.Components.Web
@*@using Bonzai.Blazor.Bootstrap.Documentation.Client.Pages.Examples.AccordionItemExamples*@

@page "/components/tab-container"

<ComponentDoc Type="typeof(TabContainer)">
    <CustomDescription>
        A container to wrap individual <code>TabPane</code> components. Used to create a tabbed interface.
    </CustomDescription>
    <Properties>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.ActiveTabId))">
            The id of the tab page that is currently active (shown). This value gets updated when a new tab is displayed.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.ActiveTabIdChanged))">
            An action to execute when the <PropertyReference Name="@nameof(TabContainer.ActiveTabId)" /> property changes.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Animated))">
            Set to <code>true</code> to use fade in/out animations when switching tabs.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Content))">
            Use this render fragment when you want to disaply the tab pages in your own custom container. Using this fragment
            will not wrap your content in any container so make sure your <PropertyReference Name="@nameof(TabPane)" />s are
            wrapped in some kind of container element.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Panes))">
            Use this render fragment when you want to disaply the tab pages in a <code>div</code> with the <code>tab-content</code>
            class. Using this fragment automatically wraps the child content in a containing <code>div</code> so it is ok to add
            <PropertyReference Name="@nameof(TabPane)" /> to this component directly.
        </ParamDescription>
        <ParamDescription Property="typeof(TabContainer).GetProperty(nameof(TabContainer.Tabs))">
            Use this fragment when you want more control over how the tab links are displayed. When using this fragment you
            can obtain a reference to the <PropertyReference Name="@nameof(TabContainer)" /> by using a cascading parameter.
            The public constant <PropertyReference Name="@nameof(TabContainer.TabContainerParameterName)" /> is the name of
            the cascaded parameter.
        </ParamDescription>
        <AdditionalAttributes />
    </Properties>
    <Methods>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.GetTabs()">
            <Description>
                Retrieves a list of <PropertyReference Name="@nameof(TabPane)" /> components that are children of this
                container.
            </Description>
        </MethodItem>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.RegisterTab(default)">
            <Description>
                Registers the <PropertyReference Name="@nameof(TabPane)" /> with this container.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPane" Type="typeof(TabPane)">
                    The <PropertyReference Name="@nameof(TabPane)" /> instance to register.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.SetActiveTabAsync(default(TabPane))">
            <Description>
                Sets the <PropertyReference Name="@nameof(TabPane)" /> passed in as the active tab pane in this
                container. The active pane is the one that is displayed.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPane" Type="typeof(TabPane)">
                    The <PropertyReference Name="@nameof(TabPane)" /> instance to make active.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
        <MethodItem TSource="TabContainer"
                    MethodExpression="x => x.SetActiveTabAsync(default(string))">
            <Description>
                Sets the <PropertyReference Name="@nameof(TabPane)" /> with the matching <code>TabPaneId</code> as the
                active tab in this container.
            </Description>
            <Parameters>
                <MethodParameterItem Name="tabPaneId" Type="typeof(string)">
                    The id of the <PropertyReference Name="@nameof(TabPane)" /> to make active.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
    </Methods>
</ComponentDoc>
<ExampleHeading />
<Example ExampleNumber="ExampleNumber">
    <Description>
        Bind to the <PropertyReference Name="@nameof(AccordionItem.Expanded)" /> property to open and close the accordion.
    </Description>
    <LiveExample>
        <TabContainer>
            <Panes>
                <TabPane Title="Tab 1">Content 1</TabPane>
                <TabPane Title="Tab 2">Content 2</TabPane>
                <TabPane Title="Tab 3">Content 3</TabPane>
            </Panes>
        </TabContainer>
    </LiveExample>
    <Code>
        @(@"<Row>
    <Column class=""mb-2"">
        <Btn Variance=""primary"" OnClick=""ButtonClick"">
            @ButtonText Item 1
        </Btn>
    </Column>
</Row>
<Accordion>
    <AccordionItem @bind-Expanded=""ExpandItem1"">
        <Header>This is item 1</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 2</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 3</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
</Accordion>

@code {
    private bool ExpandItem1 { get; set; }

    private string ButtonText => ExpandItem1
        ? ""Close""
        : ""Open"";

    private void ButtonClick()
    {
        ExpandItem1 = !ExpandItem1;
    }
}")
    </Code>
</Example>

@code{
    private int _exampleNumber;

    private int ExampleNumber
    {
        get
        {
            return ++_exampleNumber;
        }
    }
}